Pre 0.2.0 Changes
=================

0.1.2
-----

* :meth:`~oyProjectManager.models.project.Sequence.create` in
  :class:`~oyProjectManager.models.project.Sequence` is now saving the 
  settings correctly.

* removed all the references to ``oyAuxiliaryFunctions`` and replaced it with
  :mod:`oyProjectManager.utils`.

0.1.1
-----

* Updated :class:`~oyProjectManager.models.project.Sequence` documentation

* In defaultProjectSettings it is now possible to use Jinja2 templates.

* nukeEnv now sets the root.project_directory path variable to the sequence
  path and replaces all the file paths relative to project_directory path.

* fixed :class:`~oyProjectManager.ui.singletonQApplication.QApplication` for
  Qt 4.7 and later. Where it was not returning a QApplication instance
  properly.

* The ``playblastFolder`` settings is replaced with the ``output path``, which
  is more consistent.

* Fixed output path in :class:`~oyProjectManager.models.environments.nukeEnv`

* With Maya 2012, mayaEnv now sets the default image format to OpenEXR with
  ZIP compression. (updated, now checks the maya version and applies the
  compression only if the maya versions is 2012 or higher)

* Updated mayaEnv.py, now the reference and images are converted to a path
  using the "STALKER_REPOSITORY_PATH" environment variable and the mentalray
  texture paths are converted to sequence relative paths. In mentalray
  textures we still can not use the environment variable in Windows, so we
  need to keep using the relative paths.

* fixed the output path of the main node in nukeEnv.py, now in windows the
  path is absolute but in other oses it is still relative.

* oyProjectManager now supports Jinja2 templates in the project structure.
  It is now possible to create folders inside shot dependent folders:
    
    FX/{{assetBaseName}}/test_folder
   
  now renders as:
    
    FX/SH001/test_folder
    FX/SH002/test_folder
    FX/SH003/test_folder
    etc.

* Fixed houdiniEnv.py, now it is not complaining about project name when the
  file doesn't follow oyProjectManager naming conventions.

* Fixed mayaEnv.py, not it is not complaining about project names if the
  current scene name is not following the oyProjectManager naming conventions.

* Fixed houdiniEnv.py, now it is able to set the JOB environment variable
  correctly.

* nukeEnv now sets the default output to jpg

* houdiniEnv now sets the exr compression to zips (zip, single scanline)

* Fixed nukeEnv, it now correctly sets the render output to jpg under windows

* Updated mayaEnv, it is now using a more generic structure for the playblast
  folder

* Fixed render output path for houdiniEnv

* Fixed assetManager.py and mayaEnv.py. The concept of having an asset and an
  environment is now separated a little bit more. The assetManager interface is
  not updating the asset of the environment in every action taken. It is just
  updated if it is really neccessary.

* Changed the abstractClasses.Environment classes referenceAsset, importAsset
  and exportAsset methods. They are now accepting a parameter called asset,
  which shows the referenced, imported or exported asset relatively.

* Fixed asset referencing and importing in mayaEnv.py. It is now correctly
  using the environment variable.

* Fixed asset saving in mayaEnv.py. Now, it is not updating the references
  every time the asset is saved.

0.1.0
-----

* Updated houdiniEnv to filter out wedge nodes from the render nodes list,
  which was causing errors while setting the frame range limits.

* houdiniEnv now replaces the render output path with relative to the $HIP
  environment variable.

* nukeEnv now creates the full path of the current asset before saving it.

* Added "EDIT" assetType to Nuke environment.

* in :class:`~oyProjectManager.models.repository.Repository`
  some methods listed below has been renamed:
  
   * getProjectAndSequenceNameFromFilePath ->
     get_project_and_sequence_name_from_file_path
  
   * lastUser -> last_user
  
   * settingsDirPath -> settings_dir_path

* changed the version numbering scheme back again to a normal version, relase
  scheme.

* fixed houdiniEnv for negative frame ranges, previously it was giving wrong
  frame range info.

* added a leading "/" to the texture path in mentalray texture files when
  replacing the external paths with the repository path environment
  variable.

* removed the
  :meth:`~oyProjectManager.models.repository.Repository.get_settings_path`.

* removed the
  :meth:`~oyProjectManager.models.repository.Repository.projectsFullPath`,
  use
  :meth:`~oyProjectManager.models.repository.Repository.server_path`
  instead.

* Changed the :class:`~oyProjectManager.models.repository.Repository`
  inheritance, it is now an instance of the regular Python Object class
  instead of the :class:`~oyProjectManager.models.abstractClasses.Singleton`

* :meth:`~oyProjectManager.models.repository.Repository._readUsers` renamed
  to :meth:`~oyProjectManager.models.repository.Repository._parse_users`

* :meth:`~oyProjectManager.models.repository.Repository.userNames` renamed
  to :meth:`~oyProjectManager.models.repository.Repository.user_names`

* :meth:`~oyProjectManager.models.repository.Repository.userInitials`
  renamed to
  :meth:`~oyProjectManager.models.repository.Repository.user_initials`

* From now on an OSError will be raised when the users.xml file is missing.

* :class:`~oyProjectManager.models.project.Project` is now validating its name
  property and the incoming name argument by itself and the it is now able to
  produce good names in a lot of conditions.

* Updated all the codes to reduce the dependency to other packages, especially
  to oyAuxiliaryFunctions.

* timeUnit values are now stored as int instead of strings in
  :class:`~oyProjectManager.models.repository.Repository`

* replaced the internal caching system with Beaker.

* moved the class methods of the RangeTools to
  :module:`~oyProjectManager.utils`

* from now on, to create a new project with a
  :class:`~oyProjectManager.models.repository.Repository` instance, calling
  :meth:`~oyProjectManager.models.repository.Repository.createProject`
  is enough, there is no need to call
  :meth:`~oyProjectManager.models.project.Project.create` with the
  returning
  :class:`~oyProjectManager.models.project.Project` instance.

* added __eq__ and __ne__ operators to the
  :class:`~oyProjectManager.models.project.Sequence` class.

11.4.9
------

* from now on the OYPROJECTMANAGER_PATH is mandatory. Without the variable
  the system will not work.

11.4.7
------

* :class:`~oyProjectManager.models.abstractClasses.Environment` now raises
  notImplemented errors for the methods which are not implemented by the child
  class.

* :attr:`~oyProjectManager.models.repository.Repository._env_key` is renamed
  to
  :attr:`~oyProjectManager.models.repository.Repository.settings_path_env_key`

* The environment key "OYPROJECTMANAGER_SETTINGS_PATH" is renamed to
  "OYPROJECTMANAGER_PATH" to keep things simple and reasonable.

11.4.5
------

* added relpath to the :module:`oyProjectManager.utils` module, which turns
  paths to relative paths to each other

* the render file path in maya is now calculated relatively to the path
  queried from the workspace image file rule path

* file paths in nuke are now replaced with a tcl code reading the environment
  variable

* in nuke, an output node called "MAIN_OUTPUT" is created whenever the script
  is saved, and its path is set to the correct path pointed by the current
  asset.

11.4.4
------

* Now, the environment variable is set whenever the repository settings is
  read. This eliminates the need of setting the STALKER_REPOSITORY_PATH
  environment variable manually.

11.4.3
------

* finished moving the oyProjectManager to its own mercurial repository (thanks
  to the hg convert tool)

* converted the project layout to a more common Python package structure
  suitable for PyPI

* trying to use the forward slashes all over the system internaly

* :class:`~oyProjectManager.models.environments.photoshopEnv.PhotoshopEnv` is
  renamed to
  :class:`~oyProjectManager.models.environment.photoshopEnv.Photoshop`

* the output path is now handled by the VersionType class instead of the
  Structure class, it is much suitable to have the VersionType class to handle
  the output paths (still not finished).

* started to block out the
  :class:`~oyProjectManager.models.project.DefaultSEttingsParser`.

* Added test for the :class:`~oyProjectManager.models.project.Sequence` for
  the new settings structure, which includes the output_path in the type nodes
  under the assetTypes node in the settings file.

* :class:`~oyProjectManager.models.project.Structure` is not initialized with
  outputFolders argument, and doesn't have any idea what an output folders is
  anymore.

* :class:`~oyProjectManager.models.project.Sequence` now uses the
  `_settings_dirty` attribute to track down when to save settings file.

11.3.24
-------

* fixed maya.env, now it uses the repository relative path when something is
  referenced.

* fixed maya.env, the file texture paths were not correctly replaced with the
  repository relative path.

11.3.17
-------

* Fixed a little bug in mayaEnv.py

11.3.16
-------

* fixed a bug where the repository was setting the last read value of the
  server settings value to the Repository.serverPath, thus it was setting
  STALKER_REPOSITORY_PATH to the value of osx under windows, just because osx
  was the last in the settings file.

11.3.15
-------

* oyProjectMananager.models.repository.Repository now only lists projects with
  correct name formatting even they have a valid sequence inside.

* oyProjectManager.models.project.Project now lists folders as sequences only
  if their name matches the sequence name formatting.

11.3.9
------

* maya now replaces absolute paths with repository relative paths by using the
  STALKER_REPOSITORY_PATH environment variable

11.3.3
-------

* oyProjectManager.models.repository.Repository class now reads the serverPath
  variable for each of the operating systems. So it has a path for windows,
  another path for linux and another path for osx. This will let the user to
  have only one settings file valid through all over the studio.

10.12.29
--------

* mayaEnv: now it sets the render file format correctly to OpenExr if
  MentalRay is the current renderer

10.12.20
--------

* mayaEnv: fixed checking the stereoCamera rig, it is now also checking if the
  stereoCamera plugin is loaded

10.11.20
--------

* repository: the repository settings now can be read from another folder
  which is directed by the OYPROJECTMANAGER_PATH environment variable, also
  added tests for this change

* mayaEnv: while saving in maya also detects if there is a stereo camera setup
  and adds <Camera> to the render file name template

10.10.15
--------

* mayaEnv: the frame buffer and output format is forced to 16-bit half float
  OpenEXR if mentalray is selected as the renderer

10.8.27
-------

* houdiniEnv: when saving the asset, if there are any ifd (output) nodes, the
  output folders are also created in the server while setting the render image
  file name

10.8.12
-------

* houdiniEnv: saving the file now doesn't change the render range to "render
  frame range" instead it changes it to "render any frame" but sets the start
  and end frame

10.7.20
-------

* houdiniEnv: houdiniEnv now sets the output file names of the ifd nodes like
  it is set in mayaEnv

10.7.17
-------

* mayaEnv: the fileformat for the render output is forced to be iff from now
  on

* started to move the asset selection part of the interface in to a
  conservative class

10.7.6
------

* houdiniEnv: fixed getTimeUnit method

10.6.29
-------

* assetManager: corrected the tab order of the interface elements

10.6.28
--------

* mayaEnv: did a dirty edit to fix the replacing the referenced reference
  edits problem. I do not have any other solution for now than just applying
  the MEL commands from the edits (which causes other problems if the
  referenced reference file has parenting commands)

10.6.25
--------

* mayaEnv: playblasts are now saved in the correct directory without opening
  the playblast settings window

10.6.23
--------

* project:
 
  * changed the creation of the project object, now it doesn't need a project
    name to be specified, but checks if it has a name before creating it self
 
  * changed the behaviour of exists property
 
  * changed the project structure a little bit

10.6.22
-------

* mayaEnv: fixed asset replacement by changing to a new algorithm, which is
  now working in the way it should be

* asset:
 
  * parent sequence is now reached by sequence attributes instead of
    parentSequence, asset object now also have an project attribute that holds
    the project object
 
  * asset objects now has a typeName property

* project: sequence objects parentProject attribute is renamed to project

* assetReplacer:
 
  * double clicking to the referenced asset files lists first columns now
    updates the comboBoxes, and double clicking to the second column will fill
    the asset information from the combo boxes
 
  * the grab asset button has been removed
 
  * added remove replacement button to allow the user to remove the unwanted
    replacements from the list
 
* assetManager:
 
  * double clicking to the assetList_tableWidget now opens the double clicked
    asset file

10.6.21
-------

* asset: possible fix to asset model

* mayaEnv: fixed a maya bug, where maya returns wrong namespaces after
  replacing an asset

* assetReplacer: fixed subName updates and relevant assetFile field updates

10.6.16
-------

* project: project models doesn't accept a repository object anymore

* repository: repository class now has a createProject method

10.6.14
-------

* assetReplacer: fixed a little bug, caused by changing the method
  noSubNameField to a property in Sequence

10.6.6
------

* oyProjectManager: tools renamed to utils

* oyProjectManager: switched to the new property idiom

* mayaEnv: fixed calls for some methods which are now properties

10.6.2
------

* assetManager: canceling an open action is no more reloading refences
  unnecessarily

* asset: fixed a couple of bugs that results always getting False for asset
  existancy checks

* mayaEnv: fixed bug in getPathVariables method, previously it was not working
  properly after the updates in version v10.4.27 and thus the assetManager
  interface was not initializing the interface with info from recent files
  list

* abstractClasses: environment abstact base class now has a replace reference
  method to help replacing references

* mayaEnv: the new replace reference method replaces the references and does
  that with special care to reference edits. Thus, if a reference is replaced
  with a file so that the reference edits are no more valid because of a
  change in namespaces, the new replace reference method tries to find the new
  namespace and apply the same edits to the objects

* mayaEnv: getValidReferencedAssets method is renamed to getReferencedAssets,
  which is actually the intended name in the abstract base class

* assetReplacer: added a new script and interface to replace assets

10.5.25
-------

* mayaEnv: reverting back to mayaAscii on all platforms

10.5.24
-------

* mayaEnv: changed file format to mayaBinary, mayaAscii files were causing
  problems under Maya 2011

10.5.17
-------

* mayaEnv: updated the code for Maya 2011 and Pymel 1.0.2

* assetManager, assetUpdater, projectManager, projectSetter, shotEditor
  scripts are updated to not to change the style of the interface

10.5.3
------

* assetManager: added checks for project and sequence existancy while filling
  fields from file info

10.4.29
-------

* assetManager: adjusting the time unit is now obligatory

* nukeEnv: added support for time units in nuke

* houdiniEnv: added support for time units in houdini

10.4.28
-------

* assetManager: fixed asset.exists calls, because it is a property now, it
  should called properly

* oyProjectManager: added timeUnit support

* defaultSettings.xml: removed the databaseData node

* assetManager: assetManager now allows the user to cancel the saving of the
  asset file if there is a frame range misadjustment

10.4.27
-------

* mayaEnv: fixed asset validation by adding file existancy checks

10.4.21
-------

* assetManager: assetManager now sets the render frame range in any case (not
  true )

10.4.9
------

* projectManager: fixed error in addAlternativeShot method (typo)

10.4.4
------

* repository: fixed home path retriaval of the user under windows 7

* repository: removed cache from _getLastUser, there is a problem on using
  cache class in property methods with setter, this will be fixed later

* assetManager: fixed invalid calls to asset objects without fileNames while
  updating the assetsListWidget

10.3.24
-------

* assetManager: fixed a little bug that causes Maya to not to load any
  references when there are no updates necessary

10.3.23
-------

* assetUpdater: replaced the hardcoded environment creation with
  environmentFactory's create method

* mayaEnv: maya environment now uses smart reference checks. Instead of
  checking every reference one by one, it now skips reference checks for same
  asset file. So if there are a lot of references of the same file, it will be
  replaced with the latest version much more quicker

10.3.17
-------

* oyProjectManager: dataModels renamed to models, and removed the "Models"
  from names of all the scripts under it, and updated all the scripts
  importing them

* oyProjectManager: environments directory is moved under models directory

* project: getAllAssetFileNamesForType, getAllAssetsForTypeAndBaseName methods
  are updated, now it searches for files starting with "baseName + '_*'", to
  make them more robust

* shotEditor: shotEditor is now working under Houdini

* mayaEnv: in maya (for now), the references are not loaded until the version
  check is done. This leads to much more quicker scene loads in case of lots
  of updates to referenced assets

10.3.11
-------

* projectModel: Sequence classes isValidExtension, addExtensionToIgnoreList,
  removeExtensionFromIgnoreList methods and parsing of the invalid extensions
  have been removed, due to the move of the extension validation to the
  environment classes

* nukeEnv: updated the Nuke class to use extensions

10.3.10
-------

* environmentFactory: the environment settings are now being red from an xml
  settings file, with this new system, environments will be able to filter
  files that they can not open etc.

* environmentFactory: environmentFactory is no more using class methods to
  create environments, so from now on an instance is needed to create
  environments, this is done mainly to be able to have settings for different
  environments

* environmentFactory: virtualEnvironment class is added, to help to store the
  parsed environment settings data before creating the real environment object

* assetManager: the ui now lists files only with valid extension to the
  enviroment

* repositoryModel: now, repository lists only folders as projects (this
  update introduced a dependency to oyAuxiliaryFunctions but at the same time
  reduced the code duplication or increased reuse)

10.3.8
------

* assetManager: under windows xp 32-bit the ui was complaining about
  numberOfEntry_spinBox because of a compability issue between Qt versions, it
  is fixed now by setting the value in the class instead of setting the
  default value in the UI file

10.3.6
------

* projectManager: the sequence combo box under add alternative shot tab was
  not updating the sequence list, it is fixed now

10.2.23
-------

* assetModel: assetModel now holds information about the asset file size

* assetManager: assetManager now displays the file size info as megabytes

10.2.18
-------

* projectSetter: fixed an issue preventing the system not to start properly,
  on systems never set a project before

10.2.17
-------

* assetModel: fixed a bug, causes the assetManager to mulfunction, which is
  caused by files named by hand which has a matching file name format to our
  internal file name format, but doesn't have any matching assetType

10.2.15
-------

* projectSetter: projectSetter now lists only valid projects and sequences

* mayaEnv: removed the mov extension from playblast file names

10.2.6
------

* mayaEnv: changed the playblast file extension from avi to mov

10.2.5
------

* projectManager: added calls to Sequence.saveSettings in necessary places

* projectModel: fixed accidently creation of multiple shots with same name in
  sequence

* projectSetter: the oySetProject.py script is moved inside the
  oyProjectManager package, and its functionalities has been generalized by
  supporting the Environment concept

* projectManager: all the ui elements converted from MainWindow to Dialog

* assetManager, assetUpdater: assetManager now can call assetUpdater properly
  upon file load, without any crash... (congrats to my self :) )

10.2.3
------

* projectManager: in the last update the projectManager is updated to list
  valid projects only, but this made the newly created empty projects
  unreachable in sequence creation tab, it is now fixed by getting the
  projects instead of validProjects

10.2.2
------

* the dependency to outer sources are eliminated by adding the
  defaultProjectSettings.xml, users.xml, and _defaultFiles_ folder to the
  package folder

* repositoryModel: Repository class is updated to reflect the changes in the
  settings file paths

* cahce: CachedMethod now supports chaching of property methods

* repositoryModel: all suitable get methods converted to properties, and some
  of them are now cached

10.2.1
------

* projectModel: Sequence class now sorts the shots list properly whenever it
  reads or saves the settings

10.1.31
-------

* projectManager: the projectManager was not able to add alternative shots

* projectModel: defaults introduced to shot models init

* projectModel: fixed alternative shot creation

10.1.30
-------

* shotEditor: fixed shotEditor not displaying under houdini

* projectModel: sequence class now keeps only the most recent 5 backups of the
  settings

10.1.28
-------

* all the get methods (or most of them) turned to properties in most of the
  modules

10.1.26
-------

* assetManager: the frame range warning was a little bit cumbersome, it is
  fixed now

* assetManager: the interface was complaning about a wrong argument type while
  filling the assets_tableWidget, it is now fixed

10.1.25
-------

* assetManager: fixed a bug which causes the subName_listWidget and
  subName_lineEdit displaying different texts, where the subName_listWidget's
  text was wrong. This bug was caused by the lack of both setting the current
  item on the list and setting the item itself selected. So the item gets
  selected but the current item remains in a different item in the
  subName_listWidget. The same bug was existing in the baseName_listWidget too.

* assetModel: Asset class now has methods for getting the creation and update
  dates of the asset object

* assetManager: assets are now listed with their update dates

10.1.23
-------

* mayaEnv: fixed setting of the playblast folder path, it should be an
  absolute path to the playblast file

* assetManager: fixed a little bug in export which causing a little error but,
  doesn't interrupt the export process

10.1.19
-------

* projectModel: fixed a little bug in Sequence class, where it was trying to
  get info variables for non standart file names

* mayaEnv: fixed setting of playblast folder path under windows (the same old
  fucking shitty path seperator problem again!!! )

* houdiniEnv: now sets and gets the frame range

10.1.16
-------

* projectManager: the invalid characters in project and sequence are now
  removed

10.1.14
-------

* abstractClasses: the Environment class now has an __init_callback__ method
  which is called after __init__. This will let the environments to call their
  own init commands.

* nukeEnv: fixed the retrieval of a file path from the root node

* nukeEnv: now can adjust the frame range to match the shot settings

10.1.13
-------

* assetManager: added shot description field and organized the interface by
  adding group boxes

10.1.12
-------

* assetManager: nuke was complaning about the new frame range adjustments
  because it is not implemented yet. Added checks for the frame range being
  None

10.1.11
-------

* assetManager: added control of shot range while opening or saving shot
  dependent assets

* assetManager: the MainDialog now has a unified environment and asset objects
  which are shared in its methods

* mayaEnv : added shot range get and set methods

* projectModel: added getShot to Sequence class, which returns the Shot object
  with given shot name

* abstractClasses: Environment class now has a property named asset to get and
  set asset of the environment

* shotEditor: the cancel button renamed to close

* environmentFactory: to help creating environments a new class is introduced

* shotEditor: a lot of bugs are eliminated, the interface works much better
  now

* assetManager: the messages are now formatted with HTML tags

10.1.5
------

* houdiniEnv: fixed IOError for missing file.history file

10.1.4
------

* projectModel: fixed a typo in sequence classes addShots method

* nukeEnv : fixed the path problems for autosave files under Windows

9.12.30
-------

* projectModel: fixed listing of folders instead of just files in sequence
  class

* houdiniEnv: now uses the inverse of the recent files list

9.12.29
-------

* projectModel:

  * the sequence class now can undo the last change in the
    .settings.xml, but beware that there is no redo implementation yet
 
  * added name check before adding a new assetType

  * added again the extension checking for the files returned from
    the sequence.getAllAssetFileNamesForType method

* assetModel: silly codes removed from assetType class

* assetUpdater: the texts aligned to verticall center also

* assetUpdater: selectAll push button now works

* assetUpdater: added selectNone button

* shotEditor: added a simple editor to edit the shot start and end frames and
  the shot description

* projectModel: added getShots to the sequence class, which returns shot
  objects as a list

* assetManager: added invalidCharacterRemove call to the assetManager UI while
  validating the sub and baseName fields. Now it just removes the invalid
  characters instead of converting them to the ascii counterparts

9.12.28
-------

* the CachedMethod and the InputBasedCachedMethod objects now returns more
  meaningfull represantation of the cached methods

9.12.27
-------

* the database class is renamed to repository to more correctly reflect the
  current design

* the repository class moved to repositoryModel.py under dataModels

* the databaseData node in the .settings.xml for every sequence is removed and
  the attributes are moved to the sequenceData node

9.12.26
-------

* mayaEnv: the return type of the open method has been changed from list of
  asset file names to list of asset objects to have a more solid structure

* the environments are turned into classes from bare functions, and they are
  derived from the abstractClasses.Environment class

* the abstractClasses script is moved from tools to dataModels, which is more
  meaningful

* assetManager: the assetManager ui is updated to use the new environment
  classes and the assetUpdater

* the basic functions of the assetUpdater is written, but it causes the
  assetManager to crash

9.12.25
-------

* projectModel: added getAssetBaseNamesForType for the sequence object

* assetUpdater: started developing of the assetUpdater UI

9.12.24
-------

* projectModel: the getAllAssetFileNamesForType method in sequence object was
  returning full paths instead of file names, it is fixed now

* projectModel: added Shot class to manage shot data

* projectModel: the Sequence class is now using Shot objects instead of
  shotList. The settings file is updated by the sequence class instance while
  reading the settings file, if the current sequence that the object is tied
  to is using shotList instead of shot objects.

* projectModel: if the settings file is changed somehow, now the current
  version of the settings file is backed-up, to prevent data loss

9.12.23
-------

* projectModel: updated the sequence classes getAllAssets, getAllAssetsForType
  methods. The new versions uses glob and some optimizations to get all the
  assets in a sequence

9.12.21
-------

* houdiniEnv: fixed the HIH environment variable retrieval under windows

* mayaEnv: trying to reduce the dependency to oyAuxiliaryFunctions.py

9.12.20
-------

* the houdini environment now has the ability to read the recent files history
  to get a valid project and sequence names

* the Singleton class is now carried to the a new file called
  abstractClasses.py to let all the modules have access to it

* the baseName and subName fields in the assetManager UI now has the same
  vertical stretch weights so they will be in the same size from now on

* the version history and todo list are now saved to individual text files

9.12.15
-------

* the assetManager UI now displays the host environments name on the window
  title

9.12.12
-------

* the UI is not closed after referencing or importing an asset, to help the
  user easily reference multiple files

* started developing of the SuperAsset class

* the cancel button renamed to close

9.12.2
------

* The alternate shot letter is turned to upper case

* The sequence object now can add alternative shots

* ProjectManager UI is updated to have the ability to add alternative shots

9.12.1
------

* fixed a little update bug in the asset manager interface that causes the
  asset list widget to list wrong results, also fixed the subName_lineEdit
  update issue

9.11.30
-------

* for mayaEnv the assetManager now checks the referenced assets against newer
  versions of that asset and warns the user (for now) to update them

* the Asset class now checks the input project and sequence object against
  being None, if at least one of them is None the asset object becomes invalid

* Asset class now has a two new methods which called isNewVersion and
  isNewRevision, which does the same thing that the isLatestVersion and
  isLatestRevision methods were doing in previous versions. The
  isLatestVersion and isLatestRevision methods now return true if the version
  and the revision numbers are the last in their series and they return True
  if the base doesn't exists

* the assetManagers baseName and subName comboBoxes are replaced with
  listWidgets to let the user see all the alternatives of the current asset at
  the first sight

9.11.25
-------

* houdiniEnv now changes the $JOB environment variable according to the given
  assetObject while saving or opening the file

9.11.24
-------

* in houdiniEnv the path seperators were replaced with \\ even the os is
  linux, this is fixed now

* assetManager, the ui was not closing itself after a succesfull save
  operation if the environment is something other than maya, this is fixed now

9.11.22
-------

* mayaEnv now uses the recent file info only if the project is set to the same
  project with the recent files, if it doesn't match, the interface
  initialized with the current project

9.11.20
-------

* fixed path separator issues again, this time for houdini, and the reverse
  fix as the usual one, I mean, houdini uses / instead of the fucking
  windows' \\ under windows

9.11.19
-------

* fixed an issue about mayaEnv

* in houdiniEnv, while saving an asset, the script now creates the asset
  folder if it doesn't exists

9.11.18
-------

* fixed the fucking windows path problem in mayaEnv again

* assetManager UI now has a check box that enables the user to list maximum n
  number of latest entry in the assets list

9.11.17
-------

* file referencing in maya now uses name spaces

* added getFileNameWithoutExtension to Asset class

* mayaEnv now tries to get an asset name more robustly

9.11.11
-------

* queries to assets with no previous versions was failing, this error has been
  fixed

9.11.9
------

* fixed an error, occurred when a new type asset name is send to an old type
  project

9.11.7
------

* when an asset object is initialized with a wrong file name, guessing the
  fields from file name will result index error, it is now fixed

9.11.6
------

* mayaEnv now saves the asset file path to the recent files list in save and
  open actions, and retrieves the data from that list if there is currently
  no file opened

9.11.3
------

* fixed, houdini was not opening files with asset manager

9.11.2
------

* switched to a new versioning scheme, where the date is used as the version
  number like in ubuntu/kubuntu

* added houdini support

0.7.8
-----

* the asset manager ui now updates the revision and version to the latest if
  any of the sequence, assetType, shotNumber, baseName or subName field
  changes

* in asset manager ui, the subName field is reset if the assetType changed

* in asset manager ui, the subName field is cleared if there is no valid asset
  found from the input fields

* in asset manager ui, if there is no valid asset found in
  updateRevisionToLatest and updateVersionToLatest the fields are set to
  default values which are 0 and 1 respectly

0.7.7
-----

* the baseName and subName fields now are conditioned so that only the first
  letter is forced to be uppercase but the others can both be upper and lower
  case characters, and they are not validating any string if the length of the
  string is zero

* the Sequence classes getAllAssetFileNamesForType, getAllAssets and
  getAllAssetsForType methods now compares the lowercase fileName with the
  asset folders lowercase name to prevent case issues while retrieving assets

* Asset classes getAllVersions uses the fileName instead of the asset objects,
  to introduce some speed increases in long versioned asset objects

* Asset class now has a new method called getAllVersionNames, which returns
  all the version names as a list of string, it is much faster than
  getAllVersions because it doesn't create any asset object

* Asset class now has two new methods for getting the latest version and
  revision numbers and assets, which uses the getAllVersionNames to quickly
  get the version and revision numbers

* AssetManager interface class now uses the fast methods to retrieve asset
  names, versions and revisions quickly

0.7.6
-----

* Structure class now initializes the variables with list() not with None

* Structure class now has a method called fixPathIssues, to fix the path
  issues

* Structure class now has a method called removeDuplicate to remove duplicate
  entries

* Structure classes addShotDependentFolder, addShotIndependentFolder and 
  addOutputFolder now checks if the given folderName allready exists in the
  structure to prevent duplicate entries

* fixed a bug in Sequence class, where it adds outputFolders to the list
  without first clearing the list while saving the settings

0.7.5
-----

* added isValid method to Sequence class to check if the sequence is valid

* added getValidProjects method to Database class to get valid projects only
  (valid projects are the projects that has at least one valid sequence, and a
  valid sequence is the sequence that exists and has a .settings.xml file)

* the assetManager UI now only lists valid projects

* added the Singleton class

* the Database class is now derived from Singleton class

* to fix the update problem in the projectManager the cache in Database
  classes getProject method has been removed
 
* the assetManager now replaces the user initials with the first in the list
  if Database.getLastUser method returns None, thus no last user record has
  been found

* the baseName and subName fields are now have sorted data

* the Database.getUserInitials now returns a sorted user initials list

0.7.2
-----

* fixed nuke file path problem under windows, while querying the file name and
  recent file list, nuke was sending the path with wrong path seperator, it is
  now replaced with correct path seperator

0.7.1
-----

* InputBasedCachedMethod now supports methods with both arguments and keyword
  arguments

* fixed assetManager_UI and projectManager_UI was using __init__ from QDialog
  instead of QMainWindow

* added printing of the info of the operation while saving an asset

0.7.0
-----

* reorganized the interface of assetManager to have a more optimized look, and
  to reduce the code duplication

* Project and Sequence objects are now conditioned so they can not have
  numbers at the begining of their names

* Updated the projectManager ui so no numbers are allowed at the begining of
  the project and sequence names

0.6.3
-----

* now baseName and subName fields allow numbers to be used but not at the
  beggining of the string

* in assetManager ui, both the save and open asset tabs are now updated with
  the incomming asset infos from the environment

0.6.2
-----

* baseName is now capitalized after validation

* fixed _validateRevString and _validateVerString in Asset class

* added assetStatus to save and export methods of the assetManager interface
  to check if the current asset from the fields is a valid asset

* fixed path issues for '/' under windows, it was caused by the settings file
  separating the paths always with '/'

0.6.1
-----

* fixed __main__ function for the package, now the project manager user
  interface pops up by default

* fixed window title in projectManager ui

* added asset validation check in the assetManager ui before trying to get any
  variable from the asset, to prevent errors

* added removeOutputFolder to structure class

* removed some of the methods from the Sequence object, because they were just
  simple wraps of Structure objects corresponding methods. One can use
  directly the structure object by using Sequence.getStructure and then
  calling the same methods

* added these methods to Structure object:

  * removeOutputFolder
 
  * removeShotDependentFolder
 
  * removeShotIndependentFolder

0.6.0
-----

* connected the assetType_comboBox1 index change signal to assetList_widget1's
  update method, and re-enabled assetType_comboBox2's update signal being
  invoked from assetType_comboBox2

* added an input based cache system to the cache module

* added whatIsThis help to the interface elements

* renamed assetIO_mainWindow to assetManager (and the other two files are
  renamed too)

* renamed projectManament_mainWindow to projectManager (and the other two
  files renamed are too)

0.5.6
-----

* the assetList_widget1 is now listing all the versions of the currently
  selected asset

0.5.5
-----

* in nuke, if there is no file opened, thus no file name found, the script
  now tries to get the path variables from the recent file list

* to be able to mass process the sequences in the server, these new functions
  has been added:
 
  * addExtensionToIgnoreList
 
  * addNewAssetType
 
  * addNewOutputFolder
 
  * addNewShotDependentFolder
 
  * addNewShotIndependentFolder
 
  * exists
 
  * removeExtensionFromIgnoreList
 
 because these functions edits the settings of the sequence, to make the
 changes permenant, the Sequence.saveSettings() should be invoked afterwards,
 and for the folder functions, Sequence.createStructure() and a following
 Sequence.saveSettings() should be invoked

* the functions saveSettings and readSettings in Sequence object are now
  public

0.5.1
-----

* fixed file paths for windows environment in NUKE environment

* fixed initialization of envStatus variables in some functions in the
  assetIO_mainWindow

0.5.0
-----

* to prevent name clashes all the environment scripts are renamed by adding
  Env to the name of the script (ex: maya.py -> mayaEnv.py)

* added support to Nuke environment

* listing of non-asset objects or files with unwanted extensions are fixed now

0.4.2
-----

* fixed the revision check in the interface

* tried to remove Turkish characters from the interface fields but it is not
  working properly for now

0.4.1
-----

* fixed the wrong widget sizes assetIO UI

0.4.0
-----

* range tools now works properly with unicode inputs

* maya now always gets the path from the workspace

* fixed getting and setting the user initials in the interface

* fixed getting of the HOME path of the user for Windows

* added the ability to export the selected content as a new asset instead of
  just saving them

0.3.4
-----

* introduced a lot of speed optimizations, eliminated all the unnecessary
  asset object creations in the interface, but this introduced listing of
  non-asset objects (like smr files) in the interface, this will be fixed in
  next versions

* the interface tries to get all the asset information from the asset file
  names instead of asset objects

* fixed asset retrieval in open tab in the interface, caused by switching from
  a sequence that supports subNames to another which doesn't. The subName
  field was left in 'MAIN' and the code was trying to get asset file names
  with a subName of 'MAIN' in a sequence which doesn't support subName fields.

* getting the latest version or revision for an asset is now much faster

* cleaned the code a little bit

0.3.3
-----

* introduced some Pythonic optimizations to the code

* added getAllAssetsForType method to the Sequence object

* removed valid asset checks in the getAllAssetsForType method

* added getAllAssetFileNamesForType method to the Sequence object to quickly
  get the asset fils

* to retrieve asset file names very quickly, now all the filtering done over
  string variables, not in Asset objects

0.3.2
-----

* all str's are converted to unicode

0.3.1
-----

* added check for unsaved changes in current scene while oppening an asset

* the environment script maya, now tries to fix the path seperator for windows

0.3.0
-----

* added check for the asset path while saving, it was giving errors for
  non-existing asset paths

* added open functionalities

* fixed wrong fileName creation in Asset objects

* for sequences that doesn't support subName fields, int the Asset object,
  asset file name was not including the notes part of the file name, it is now
  fixed

* asset interface now ask the user permission to overwrite a file, instead of
  canceling the saving process (it is not allowed though to save over a file)

* updated the render file name in MAYA environment to hold the subName field
  in case the sequence supports it

* added interface for project management (ie. creaeting projects, adding shots
  etc.)

0.2.0
-----

* now the Database object reads the settings from the databaseSettings.xml
  in the project root

* added half support for multiple servers (full support will be in near
  future)

* fixed the creation of a sequence from a project object

* removed the project management functionalities to another interface

* renamed the current mainWindow to assetIO_mainWindow

* added the environment variable to the VersionType object

* added the output attribute to the Structure node, and updated the
  defaultSettings.xml. The output attribute will hold the output folder
  poperties for types like render and comp.

* created environment module, that holds a environment specific scripts for
  actions like save, open, import

0.1.5
-----

* added the ability to save under MAYA environment

0.1.4
-----

* finished converting the single script to a python package

* converted the window style to Plastique

0.1.3
-----

* scripts are moved to their own directory to make the system clean

* started to convert the single script to a python package

0.1.2
-----

* switched to QMainWindow from QDialog

* added the version information to the window title

0.1.1
-----

* the MainDialog object now stores a local Project and a Sequence object to
  help its methods to use the cache system while querying the data

* increased the maxTimeDelta in CachedMethod attribute to 60 seconds

0.1.0
-----

* Added support for old style of Asset naming, which has no subName field,
  this support made the code a little bit unreadable and dirty so it needs to
  be removed as soon as this support is obsolute

0.0.9
-----

* in previous versions, even there was a parser for the database node in the
  sequence settings, it was not used, so the sequence was running with its
  default values for some variables, it is fixed now

* added functionalities to open tab in the UI, this update introduced a lot of
  code duplication, this will be fixed in next versions

* now the interface tries to keep the assetType fixed from one sequence to
  another sequence

* replaced the saveCancel_buttonBox with individual Save and Cancel buttons

* convertToShotString in Sequence object now accepts both integers and strings
  as shotNumber argument, and converts them properly to shotStrings

* Asset objects getAllVersions method was trying to dive in to the file system
  to get the other versions, now it uses the parentSequence to get all the
  versions, it has a little bit more overhead but later on if we switch to a
  real database it will be easy to implement this way

* added extensionsToIgnore settings to Sequence objects, to prevent listinings
  of files which are not actually an Asset but has valid file name structure
  (for example the .smr files have correct naming convention but they are not
  actual assets)

* the asset info variables are now initialized with None instead of ''

* in Asset object, it is now possible to query the versions of an Asset object
  without supplying all of the information (_fullInfo), the baseName, subName
  and typeName (_baseInfo) is now enough to get a list of Asset objects

* Asset objects extension is now queryable

0.0.8
-----

* Asset objects now accepts one of the rev/revString and ver/verString info
  variables when setting the infoVariables

* Asset objects now has exists and baseExists attributes. exists is True when
  the file exists, baseExists is True when there are files starting with same
  critiqueName

* Asset objects now has getPathVariables() method that returns the
  pathVariables

* Asset objects now has getCritiqueName() method that returns the critique
  part of the asset fileName, which is the string baseName_subName_typeName

* Asset objects now has several get methods for getting the whole info about
  that particular asset

* Database object now has a method that converts a path in to a project and
  sequence name if possible

* Sequence objects now can convert a shotString to shotNumber, which is also a
  string

* Fixed the alignment problems in the MainDialog interface elements

* changed the baseName and subName lineEdit fields to comboBox, to let the
  user choose from a list of available choises for the current asset. For
  example, if the user choose MODEL for assetType then all the model assets
  baseNames are listed in baseName comboBox, and if the user selects one of
  the MODELs then the subName comboBox is filled with subNames of that
  MODEL...

* added a main function for the script to be used from the command line

* the MainDialog now initializes with the environment, fileName and path
  variable, so it is now possible to fill the fields with the info that comes
  from those variables

* "get latest revision" and "get latest version" buttons are now working

* the MainDialog now can return an Asset object build with the data from the
  fields

0.0.7
-----

* added a main function

* added an environment option to setup the program for that environment
  like( MAYA, NUKE, HOUDINI, PHOTOSHOP etc. )

* changed the commented region at the start (this section) to a doc string

0.0.6
-----

* fixed CachedMethod, it was storing the data in class instead of the
  instance object, so two objects in the same type were sharing the same
  cache, resulting false information, it is fixed now by completely re-writing
  the CachedMethod class

* the assetTypes comboBox was complaining about the assetTypes variable
  to be None, this is fixed now by checking the assetTypes variable against
  None

0.0.5
-----

* added a PyQt4 interface
* added CachedMethod function decorator to cache functions return values
  over a period of time

0.0.4
-----

* added asset filtering routines to help getting data more quickly

0.0.3
-----

* Sequence can now query all assets, all asset in specific type and all asset
  of a specific user

* Sequence uses a simple cache for querying assets

* for all the classes added 'get/set' prefixes for the functions that gets or
  sets something

0.0.2
-----

* database, project and sequence classes are now working properly, but they
  definitely need more attention

0.0.1
-----

* intial development version
